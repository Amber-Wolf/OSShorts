#include <string>
#include <vector>
#include <unistd.h>
#include <sys/wait.h>
#include <stdexcept>
#include <ext/stdio_filebuf.h>

//---------------------------------------------------------------//
//              * *    DO NOT MODIFY THIS FILE   *  *            //
//---------------------------------------------------------------//

/**
   A conveience class to create a process and provide a simple wrapper
   around its artifacts.  In this homework exercise, this class has
   been extended to provide convenient access to the following streams
   of the process:

   1. The standard input  stream of a process (via a pipe)
   2. The standard output stream of a process (via a pipe)

   Exam questions:
      - What happens when wait is called on a Process?
	  - What happens if wait is never called on a Process?
	  - What happesn if wait is called on a process that has already finished running?
	  - What happens if wait is called 3 times on a process that has already finished running?
*/
class Process {
public:
    /**
       Convenience method to obtain the operating system generated
       error message associated with a given error code.  This method
       is typically used to generate meanigful error messages in the
       exceptions thrown by various methods in this class.  This
       method is typically used as shown in the example code fragment
       below:

       \begincode

        if ((pid = fork()) == -1) {
           const int errCode = errno; // save system error code.
           throw std::runtime_error(getErrorMsg(errCode));
        }

       \endcode

       \param[in] sysErrCode The value in the global ::errno system
       variable that contains the error code generated by the OS.

       \return The string message corresponding to the OS generated
       error code.
    */
    static std::string getErrorMsg(const int sysErrCode);
    
    /** Primary method to create a child-process.

		This method forks the current process to create a child
        process.  If the fork is successful, then this method returns
        a valid Process object [see isValid()] in both the parent
        [isChild() returns false] and child processes [isChild()
        returns true].

        \param[in] redirectStdIO If this flag is true, then the
        standard input and output streams are redirected using pipes
        so that they can eventually be accessed via the getStdin() and
        getStdout() methods in this class.  If this parameter is false
        then the standard I/O streams are not redirected.

        \return On successful forking this method returns a valid
        Process object in both the parent and child processes.

        \exception std::runtime_error On errors, a child process is
        not created and this method throws std::runtime_error
        exception.
    */
    static Process create(bool redirectStdIO)
        throw (std::runtime_error);

    /** Convenience method to run a given command as a child-process.

		This method converts the given command-line to a vector of
        strings (using white space as argument delimiter) and uses
        the overloaded Process::create(const bool, const
        std::vector<std::string>&) to run the given command in a
        separate process.

        NOTE: This method cannot be used to pass blank-spaces as
        arguments to the child process.
		
        \param[in] redirectStdIO If this flag is true then the
        standard input and standard output streams of the child
        process created via this command are redirected using
        anonymous (or ordinary) pipes.
        
        \param[in] cmdLine The name of the command along with
        arguments.  Example of strings that can be passed-in to this
        method are: "ps", "find /usr -name stdio_*.h -print", "blah
        blah-be-de-blah blah-blah", etc.) to be run.  Assuming the
        following about the string:
        
        - Words in the string are delimited by 1 or more white-spaces.
        
        - The first word indicates the command to be executed and
          rest of the words are command-line arguments to be passed
          to the program to be run.
        
        \param[in] redirectStdIO If this flag is true, then the
        standard input, output, and error streams must be redirected
        using pipes so that they can eventually be accessed via the
        getStdin() and getStdout() methods in this class.  If this
        parameter is false then no further action is needed.
          
        \param[in] The command line to be run as a separate process.
          
        \return On success this method returns a valid Process
        object on the parent (and the child runs the supplied
        command).
        
        \exception std::runtime_error This method throws exceptions on
        errors.  Specifically, the child process throws an exception
        if execvp fails causing the child process to terminate.  On
        the parent this method may indirectly generate a
        std::runtime_error exception if the internal call to the
        overloaded Process::create(bool) method fails and throws an
        exception.
        
        @see strdup (a handy method to create c-strings for
        command-line arguments to be passed to execvp).
    */
    static Process create(const bool redirectStdIO,
                          const std::string& cmdLine)
        throw (std::runtime_error);

    /** Convenience method to run a given command as a child-process.

		This method operates as follows:
		
		* This method first forks the current process to create a
          child process by calling the overloaded create(bool) method.

		* In the child process [see isChild() method], this method
          runs the given command (cmd parameter) with the supplied
          arguments (in args).

		* On the parent process this method returns a returns a valid
		  Process object that refers to the child process.

          \param[in] redirectStdIO If this flag is true, then the
          standard input and output streams of the child process are
          suitably redirected using anonymous (or ordinary) pipes.
          
		  \param[in] args The command and command-line arguments for
		  the program to be executed as a separate child process.  The
		  first entry in this vector is assumed to be the command to
		  be executed by this method.
          
          \return On success this method returns a valid Process
          object on the parent (and the child runs the supplied
          command).

          \exception std::runtime_error This method throws exceptions
          on errors.  Specifically, the child process throws an
          exception if execvp fails causing the child process to
          terminate.  On the parent this method may indirectly
          generate a std::runtime_error exception if the internal call
          to the overloaded Process::create(bool) method fails and
          throws an exception.

          @see strdup (a handy method to create c-strings for
          command-line arguments to be passed to execvp).
    */
    static Process create(const bool redirectStdIO,
                          const std::vector<std::string>& args)
        throw (std::runtime_error);
	
	/**
	   The move constructor for this class.  The move constructor
	   initializes "this" object my moving the necessary information
	   from src (parameter) to "this".
	*/
    Process(Process&& src);

    /**
       Determine if the process entry is valid.

       This is a convenience method to determine if the process entry
       is valid (and no errors occurred when the entry was created)

       \return This method returns false if the pid is negative.
       Otherwise it returns true.
    */
    bool isValid() const;

    /**
       Determine if the process entry refers to a child process.

       This is a convenience method to determine if the process entry
       is referring to a child process.  This method is typically used
       to distinguish operations on a child process versus parent
       process by using the object returned by a call to
       Process::create(bool) method in this class.
       
       \return This method returns true if the pid is zero to indicate
       this method is being called on the actual child process.
       Otherwise this method returns false (to indicate that a valid
       child-process pid is present and the method is being invoked on
       the parent process entry).
    */
    bool isChild() const;
    
    /**
       Obtain the PID of this process.

       \return The PID of the process that was set for this object
       when the process was created.
    */
    inline pid_t getPid() const { return pid; }

    /* Wait for child process to finish for given delay (seconds).

       If this method is invoked on a child process (that is isChild()
       method returns true) then this method exits immediately
       returning false.

       If delay == -1, then this method blocks indefinitely until the
       child process has finished, suitably updates exit code, and
       returns true.

       If the delay >= 0, it periodically checks for the child process
       to terminate every second for a duration specified by "delay"
       seconds.  If the child process terminates, then this method
       updates the value of exitCode and returns true.

       \return This method method returns true if the child process
       has terminated and updates the exitCode appropriately.
       Otherwise this method returns false indicating the child
       process is still running.
    */
    bool wait(int& exitCode, int delay = -1);

	/**
	   This method must be used to close a given stream that has been
	   redirected.

	   NOTE: If the I/O streams were not redirected then this method
	   perform no specific operation.

       \param[in] streamType The type of the stream for which the
       redirected stream is to be obtained. Valid parameters are
       STDIN_FILENO (named constant for 0) and STDOUT_FILENO (name
       constant for 1)
	*/
	void close(const int streamType);
	
    /**
       Obtain the native handle to a given pipe.

       This method may be used to obtain the native handle to a given
       redirected stream (the other end of the pipe handle returned by
       this method is connected to the standard I/O stream).

       \param[in] streamType The type of the stream for which the
       redirected stream is to be obtained. Valid parameters are
       STDIN_FILENO (named constant for 0) and STDOUT_FILENO (name
       constant for 1)
    */
    int getHandle(const int streamType) const;

    /**
       The stream that can be used to read the standard output data
       generated by the child process.

       NOTE: If the streams are not redirected then this method simply
       returns std::cin.

       \return The stream from where the child process's standard
       outputs can be read.
    */
    std::istream& getStdout() const;

    /**
       The stream that can be used to write data to the standard input
       of the child process.

       \return This method returns the stream to which data can be
       written (to send the data to the process's standard input). If
       the I/O streams have not been redirected then this method
       returns std::cout.
    */
    std::ostream& getStdin() const;

    /**
       Destructor. Free's dynamic memory (if any) used by this class.
    */
    virtual ~Process();
	
protected:
	/**
	   The constructor to create a process object.  The constructor is
	   intentionally made protected to ensure it is invoked only from
	   one of the create() methods in this class.

       \param[in] pid The pid associated with this process.

       \param[in] pipeHandle An optional list of pipe handles than can
       be used to initialize the pipe handles associated with this
       process.
	*/
    Process(const pid_t pid, const int *pipeHandles = NULL);

    /**
       This static array is used to track the set of open file handles
       in the parent process. Each time a fork is run these file
       handles need to be closed in the child process to ensure
       correct use of file handles.
    */
    static std::vector<int> openPipeHandles;
    
private:
    /**
       The process ID associated with the child process.  The pid is
       non-zero in the parent process and is zero in the child
       process.

       NOTE: When an error occurrs during fork() the return value is
       -1 indicating and if pid is -1, it is interpreted as an invalid
       process entry.
    */
    const pid_t pid;

    /**
       This instance variable that tracks the pipe handles that have
       been used to redirect the I/O streams for this process.  If I/O
       stream have not been redirected then all entries in this array
       are initialized to -1.
    */
    int pipeHandles[2];
	
    /**
       The output stream to which the data is to be written. This
       stream wraps the end of the pipe that is tied to the standard
       input of child process
     */
    std::ostream* stdin;

    /**
       The input stream from where the standard output for this
       process can be read.  This stream wraps the end of the pipe
       that is tied to the output stream of the child process.
    */
    std::istream* stdout;

    /**
       The file buffer that is used to wrap the native OS pipe
       handles.  If standard I/O streams have not been redirected then
       entries in this array are typically set to NULL.
    */
    __gnu_cxx::stdio_filebuf<char> *pipeFileBuf[2];
};
